# -*- coding: utf-8 -*-
"""
Created on Tue Jul 28 23:45:03 2020

@author: Samael Olascoaga Del Angel <samael@xanum.uam.mx> <olaskuaga@gmail.com>

Gráficas de función de distribución acumulada y estadistica descriptiva de las matrices de tanimoto generadas 
por MayachemTools para análisis de similutd estructural

Graphs of cumulative distribution function and descriptive statistics of the tanimoto matrices generated by MayachemTools
for structural similarity analysis
"""
import glob
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

os.makedirs('results', exist_ok=True)
sns.set(style="white", palette="bright")
num_bins = 20

csv_files = glob.glob('*.csv') # Especificamos un patron de busqueda de archivos
molecules = int(input("Numero de moleculas de referencia: "))


fp_names = [] # Variable en donde guardaremos el nombre de los fingerprints 
for filename in csv_files:
    fp_names.append(filename.split(".csv")[0]) # Separamos el nombre de la extensión .csv

    
dfs = [] # Lista vacia en donde guardaremos los df
for filename in csv_files: # Recorremos los archivos y guardamos cada uno en la lista dfs[]
    data = pd.read_csv(filename,  index_col=[0])
    dfs.append(data)
    
for i in range(len(dfs)): # Pre-procesamiento de los data frames
    dfs[i] = dfs[i].where(np.tril(np.ones(dfs[i].shape), -1).astype(np.bool)) # Obtenemos el triangulo superior de la matriz
    dfs[i].drop(dfs[i].iloc[:, molecules:], inplace = True, axis = 1) # Nos quedamos con las columnas de nuestras moleculas de referencia
    dfs[i] = dfs[i].stack().reset_index().drop("level_1", axis=1).sort_values(by=0, ascending=False) # Convertimos el dataframe en una matriz de una dimensión

# Calculo del CFD
for i in range(len(csv_files)): 
    counts, bin_edges = np.histogram(dfs[i][0], bins=num_bins)
    cdf = np.cumsum (counts)
    plt.plot (bin_edges[1:], cdf/cdf[-1], label=fp_names[i])
    
plt.legend(loc=4)
plt.xlabel("Similarity")
plt.ylabel("Cumulative distribution function")
plt.title("Fingerprints similarity (FDA Aproved)")
sns.despine()
plt.savefig('results\cdf.png') # Guardamos la imagen

# Parametros descriptivos
descriptive = pd.DataFrame(columns=['Finger print', 'Min', 'Max', 'Mean', 'Median', 'STD'])
for i in range(len(fp_names)):
    descriptive.loc[i] = [fp_names[i], min(dfs[i][0]), max(dfs[i][0]), 
                          np.mean(dfs[i][0]), np.median(dfs[i][0]), np.std(dfs[i][0])]
descriptive.to_csv('results\descriptive.csv')