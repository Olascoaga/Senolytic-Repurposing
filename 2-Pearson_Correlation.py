# -*- coding: utf-8 -*-
"""
Created on Tue Jul 28 23:45:03 2020

@author: olask

Análisis de correlación y heatmap de los fingerprints generados por MayachemTools para análisis de similitud estructural

Correlation and heatmap analysis of fingerprints generated by MayachemTools for structural similarity analysis

"""
import glob
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

os.makedirs('results', exist_ok=True)
sns.set(style="white", palette="bright", font_scale=1)
num_bins = 20

csv_files = glob.glob('*.csv') # Especificamos un patron de busqueda de archivos
molecules = int(input("Numero de moleculas de referencia: "))

fp_names = [] # Variable en donde guardaremos el nombre de los fingerprints 
for filename in csv_files:
    fp_names.append(filename.split(".csv")[0]) # Separamos el nombre de la extensión .csv

dfs = [] # Lista vacia en donde guardaremos los df
for filename in csv_files: # Recorremos los archivos y guardamos cada uno en la lista dfs[]
    data = pd.read_csv(filename,  index_col=[0])
    dfs.append(data)

for i in range(len(dfs)): # Pre-procesamiento de los data frames
    dfs[i] = dfs[i].where(np.tril(np.ones(dfs[i].shape), -1).astype(np.bool)) # Obtenemos el triangulo superior de la matriz
    dfs[i].drop(dfs[i].iloc[:, molecules:], inplace = True, axis = 1) # Nos quedamos con las columnas de nuestras moleculas de referencia
    dfs[i] = dfs[i].stack()
    
# Análisis de correlación
dfs = pd.DataFrame(dfs).to_numpy()
dfs = pd.DataFrame(dfs).transpose()
dfs.columns = fp_names
corrMatrix = dfs.corr()
f, ax = plt.subplots(figsize=(12, 9))
heatmap = sns.heatmap(corrMatrix, cmap='coolwarm', annot=True, fmt=".2f", annot_kws={'size':12}, square=False, ax=ax)
loc, labels = plt.xticks()
heatmap.set_xticklabels(labels, rotation=45)
heatmap.set_yticklabels(labels, rotation=0)
bottom, top = heatmap.get_ylim()
heatmap.set_ylim(bottom + 0.5, top -0.5)
f.savefig('results\CorrMatrix.png')
plt.show()
corrMatrix = corrMatrix.where(np.tril(np.ones(corrMatrix.shape), -1).astype(np.bool)) # Obtenemos el triangulo superior de la matriz
corrMatrix.to_csv('results\CorrMatrix.csv')